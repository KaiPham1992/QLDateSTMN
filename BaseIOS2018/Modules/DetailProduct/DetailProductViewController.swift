//
//  DetailProductViewController.swift
//  BaseIOS2018
//
//  Created Ngoc Duong on 11/1/18.
//  Copyright © 2018 Ngoc Duong. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import BarcodeScanner

class DetailProductViewController: UIViewController, DetailProductViewProtocol {
   
	var presenter: DetailProductPresenterProtocol?
    @IBOutlet weak var tfBarcode: UITextField!
    @IBOutlet weak var tbProduct: UITableView!
    
    var listProduct = [ProductEntity]() {
        didSet {
            tbProduct.reloadData()
        }
    }

	override func viewDidLoad() {
        super.viewDidLoad()
        configureTable()
    }
    
    @IBAction  func btnBarCodeTapped() {
        let vcBarCode = makeBarcodeScannerViewController()
        vcBarCode.title = "Barcode Scanner"
        present(vcBarCode, animated: true, completion: nil)
    }
    
    private func makeBarcodeScannerViewController() -> BarcodeScannerViewController {
        let viewController = BarcodeScannerViewController()
        viewController.codeDelegate = self
        viewController.errorDelegate = self
        viewController.dismissalDelegate = self
        return viewController
    }
    
    @IBAction func btnDetailTapped() {
        if tfBarcode.text&.isEmpty {
            PopUpHelper.shared.showMessage(message: "Nhập mã vạch sản phẩm")
        } else {
            listProduct = []
            presenter?.getDetail(barCode: tfBarcode.text&)
        }
        
    }

}

extension DetailProductViewController: UITableViewDelegate, UITableViewDataSource {
    func configureTable() {
        tbProduct.registerXibFile(ProductCell.self)
        tbProduct.delegate = self
        tbProduct.dataSource = self
        tbProduct.separatorStyle = .none
        
        tbProduct.estimatedRowHeight = 150
        tbProduct.rowHeight = UITableViewAutomaticDimension
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return listProduct.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tbProduct.dequeue(ProductCell.self, for: indexPath)
        cell.product = listProduct[indexPath.item]
        cell.lbOrder.text = "\(indexPath.item + 1)"
        return cell
    }
}

extension DetailProductViewController {
    func didGetDetail(listProduct: [ProductEntity]) {
        self.listProduct = listProduct
    }
}


// MARK: - BarcodeScannerCodeDelegate
extension DetailProductViewController: BarcodeScannerCodeDelegate {
    func scanner(_ controller: BarcodeScannerViewController, didCaptureCode code: String, type: String) {
        print("Barcode Data: \(code)")
        print("Symbology Type: \(type)")
        tfBarcode.text = code
        controller.dismiss(animated: true, completion: nil)
        
//        DispatchQueue.main.asyncAfter(deadline: .now() + 5.0) {
//            controller.resetWithError()
//        }
    }
}

// MARK: - BarcodeScannerErrorDelegate

extension DetailProductViewController: BarcodeScannerErrorDelegate {
    func scanner(_ controller: BarcodeScannerViewController, didReceiveError error: Error) {
        print(error)
    }
}

// MARK: - BarcodeScannerDismissalDelegate

extension DetailProductViewController: BarcodeScannerDismissalDelegate {
    func scannerDidDismiss(_ controller: BarcodeScannerViewController) {
        controller.dismiss(animated: true, completion: nil)
    }
}
